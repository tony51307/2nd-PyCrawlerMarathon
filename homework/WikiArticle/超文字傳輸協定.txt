<p><b>超文本傳輸協定</b>（英語：<span lang="en"><b>H</b>yper<b>T</b>ext <b>T</b>ransfer <b>P</b>rotocol</span>，縮寫：<b>HTTP</b>）是一種用於分佈式、協作式和<a href="/wiki/%E8%B6%85%E5%AA%92%E9%AB%94" title="超媒體">超媒體</a>訊息系統的<a href="/wiki/%E5%BA%94%E7%94%A8%E5%B1%82" title="應用層">應用層</a><a href="/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" title="網路傳輸協定">協定</a><sup class="reference" id="cite_ref-ietf2616_1-0"><a href="#cite_note-ietf2616-1">[1]</a></sup>。HTTP是<a class="mw-redirect" href="/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2" title="全球資訊網">全球資訊網</a>的資料通信的基礎。
</p>
<p>設計HTTP最初的目的是為了提供一種發布和接收<a href="/wiki/HTML" title="HTML">HTML</a>頁面的方法。透過HTTP或者<a class="mw-redirect" href="/wiki/HTTPS" title="HTTPS">HTTPS</a>協定請求的資源由<a href="/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6" title="統一資源標誌符">統一資源識別碼</a>（Uniform Resource Identifiers，URI）來標識。
</p>
<p>HTTP的發展是由<a class="mw-redirect" href="/wiki/%E6%8F%90%E5%A7%86%C2%B7%E6%9F%8F%E5%85%A7%E8%8C%B2-%E6%9D%8E" title="提姆·柏內茲-李">提姆·柏內茲-李</a>於1989年在<a href="/wiki/%E6%AD%90%E6%B4%B2%E6%A0%B8%E5%AD%90%E7%A0%94%E7%A9%B6%E7%B5%84%E7%B9%94" title="歐洲核子研究組織">歐洲核子研究組織</a>（CERN）所發起。HTTP的標準制定由<a href="/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91%E8%81%94%E7%9B%9F" title="全球資訊網協會">全球資訊網協會</a>（World Wide Web Consortium，W3C）和<a href="/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E4%BB%BB%E5%8A%A1%E7%BB%84" title="網際網路工程任務組">網際網路工程任務組</a>（Internet Engineering Task Force，IETF）進行協調，最終發布了一系列的<a href="/wiki/RFC" title="RFC">RFC</a>，其中最著名的是1999年6月公布的 <a class="external mw-magiclink-rfc" href="https://tools.ietf.org/html/rfc2616" rel="nofollow">RFC 2616</a>，定義了HTTP協定中現今廣泛使用的一個版本——HTTP 1.1。
</p>
<p>2014年12月，<a href="/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E4%BB%BB%E5%8A%A1%E7%BB%84" title="網際網路工程任務組">網際網路工程任務組</a>（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小組將<a href="/wiki/HTTP/2" title="HTTP/2">HTTP/2</a>標準提議遞交至<span class="ilh-all" data-foreign-title="Internet Engineering Steering Group" data-lang-code="en" data-lang-name="英語" data-orig-title="IESG"><span class="ilh-page"><a class="new" href="/w/index.php?title=IESG&amp;action=edit&amp;redlink=1" title="IESG（頁面不存在）">IESG</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Internet_Engineering_Steering_Group" title="en:Internet Engineering Steering Group"><span dir="auto" lang="en">Internet Engineering Steering Group</span></a></span>）</span></span>進行討論<sup class="reference" id="cite_ref-2"><a href="#cite_note-2">[2]</a></sup>，於2015年2月17日被批准。<sup class="reference" id="cite_ref-approval2_3-0"><a href="#cite_note-approval2-3">[3]</a></sup> HTTP/2標準於2015年5月以RFC 7540正式發表，取代HTTP 1.1成為HTTP的實作標準。<sup class="reference" id="cite_ref-rfc7540_4-0"><a href="#cite_note-rfc7540-4">[4]</a></sup>
</p>
<p>HTTP是一個客戶端（用戶）和伺服器端（網站）之間請求和應答的標準，通常使用<a href="/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" title="傳輸控制協定">TCP協定</a>。透過使用<a class="mw-redirect" href="/wiki/%E7%B6%B2%E9%A0%81%E7%80%8F%E8%A6%BD%E5%99%A8" title="網頁瀏覽器">網頁瀏覽器</a>、<a class="mw-redirect" href="/wiki/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB" title="網路爬蟲">網路爬蟲</a>或者其它的工具，客戶端發起一個HTTP請求到伺服器上指定埠（預設<a href="/wiki/%E9%80%9A%E8%A8%8A%E5%9F%A0" title="通訊埠">埠</a>為80）。我們稱這個客戶端為用戶代理程式（user agent）。應答的伺服器上儲存著一些資源，比如HTML檔案和圖像。我們稱這個應答伺服器為源伺服器（origin server）。在用戶代理和源伺服器中間可能存在多個「中間層」，比如<a class="mw-redirect" href="/wiki/%E4%BB%A3%E7%90%86%E4%BC%BA%E6%9C%8D%E5%99%A8" title="代理伺服器">代理伺服器</a>、<a href="/wiki/%E7%BD%91%E5%85%B3" title="閘道器">閘道器</a>或者<a href="/wiki/%E9%9A%A7%E9%81%93" title="隧道">隧道</a>（tunnel）。
</p>
<p>儘管<a class="mw-redirect" href="/wiki/TCP/IP" title="TCP/IP">TCP/IP</a>協定是網際網路上最流行的應用，但是在HTTP協定中並沒有規定它必須使用或它支援的層。事實上HTTP可以在任何網際網路協定或其他網路上實作。HTTP假定其下層協定提供可靠的傳輸。因此，任何能夠提供這種保證的協定都可以被其使用，所以其在TCP/IP協定族使用TCP作為其傳輸層。
</p>
<p>通常，由HTTP客戶端發起一個請求，建立一個到伺服器指定埠（預設是80埠）的TCP連接。HTTP伺服器則在那個埠監聽客戶端的請求。一旦收到請求，伺服器會向客戶端返回一個狀態，比如"HTTP/1.1 200 OK"，以及返回的內容，如請求的檔案、錯誤訊息、或者其它訊息。
</p>
<p>HTTP/1.1協定中共定義了八種方法（也叫「動作」）來以不同方式操作指定的資源：
</p>
<p>方法名稱是區分大小寫的。當某個請求所針對的資源不支援對應的請求方法的時候，伺服器應當返回<a href="/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#405" title="HTTP狀態碼">狀態碼405</a>（Method Not Allowed），當伺服器不認識或者不支援對應的請求方法的時候，應當返回<a href="/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#501" title="HTTP狀態碼">狀態碼501</a>（Not Implemented）。
</p>
<p><b>HTTP伺服器至少應該實作GET和HEAD方法</b>，其他方法都是可選的。當然，所有的方法支援的實作都應當符合下述的方法各自的語意定義。此外，除了上述方法，特定的HTTP伺服器還能夠擴充自訂的方法。例如：
</p>
<p>對於GET和HEAD方法而言，除了進行取得資源訊息外，這些請求不應當再有其他意義。也就是說，這些方法應當被認為是「安全的」。
客戶端可能會使用其他「非安全」方法，例如POST，PUT及DELETE，應該以特殊的方式（通常是按鈕而不是<a class="mw-redirect" href="/wiki/%E8%B6%85%E9%93%BE%E6%8E%A5" title="超連結">超連結</a>）告知客戶可能的後果（例如一個按鈕控制的資金交易），或請求的操作可能是不安全的（例如某個檔案將被上傳或刪除）。
</p>
<p>但是，不能想當然地認為伺服器在處理某個GET請求時不會產生任何副作用。事實上，很多動態資源會把這作為其特性。這裡重要的區別在於用戶並沒有請求這一副作用，因此不應由用戶為這些副作用承擔責任。
</p>
<p><span id="幂等方法"></span>
假如在不考慮諸如錯誤或者過期等問題的情況下，若干次請求的副作用與單次請求相同或者根本沒有副作用，那麼這些請求方法就能夠被視作「<a href="/wiki/%E5%86%AA%E7%AD%89" title="冪等">冪等(idempotence)</a>」的。GET，HEAD，PUT和DELETE方法都有這樣的冪等屬性，同樣由於根據協定，OPTIONS，TRACE都不應有副作用，因此也理所當然也是冪等的。
</p>
<p>假如一個由若干請求組成的請求序列產生的結果，在重複執行這個請求序列或者其中任何一個或多個請求後仍沒有發生變化，則這個請求序列便是「冪等」的。但是，可能出現一個由若干請求組成的請求序列是「非冪等」的，即使這個請求序列中所有執行的請求方法都是冪等的。例如，這個請求序列的結果依賴於某個會在下次執行這個序列的過程中被修改的變數。
</p>
<p>超文本傳輸協定已經演化出了很多版本，它們中的大部分都是<a href="/wiki/%E5%90%91%E4%B8%8B%E5%85%BC%E5%AE%B9" title="向下相容">向下相容</a>的。在 <a class="external mw-magiclink-rfc" href="https://tools.ietf.org/html/rfc2145" rel="nofollow">RFC 2145</a> 中描述了HTTP版本號的用法。客戶端在請求的開始告訴伺服器它採用的協定版本號，而後者則在回應中採用相同或者更早的協定版本。
</p>
<p>已過時。只接受GET一種請求方法，沒有在通訊中指定版本號，且不支援請求頭。由於該版本不支援POST方法，因此客戶端無法向伺服器傳遞太多訊息。
</p>
<p>這是第一個在通訊中指定版本號的HTTP協定版本，<mark class="template-facttext" title="需要提供文獻來源">至今仍被廣泛採用，特別是在<a href="/wiki/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8" title="代理伺服器">代理伺服器</a>中。</mark><sup class="noprint Template-Fact"><a href="/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90" title="Wikipedia:列明來源"><span style="white-space: nowrap;" title="來源請求。">[來源請求]</span></a></sup>
</p>
<p>持久連接被預設採用，並能很好地配合代理伺服器工作。還支援以<a class="mw-redirect" href="/wiki/HTTP%E7%AE%A1%E7%BA%BF%E5%8C%96" title="HTTP管線化">管道方式</a>在同時傳送多個請求，以便降低線路負載，提高傳輸速度。
</p>
<p>HTTP/1.1相較於HTTP/1.0協定的區別主要體現在：
</p>
<p>目前版本，於2015年5月作為網際網路標準正式發布。<sup class="reference" id="cite_ref-5"><a href="#cite_note-5">[5]</a></sup>
</p>
<p>所有HTTP回應的第一行都是<b>狀態行</b>，依次是目前HTTP版本號，3位數字組成的<a href="/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" title="HTTP狀態碼">狀態代碼</a>，以及描述狀態的短語，彼此由空格分隔。
</p>
<p>狀態代碼的第一個數字代表目前回應的類型：
</p>
<p>雖然 <a class="external mw-magiclink-rfc" href="https://tools.ietf.org/html/rfc2616" rel="nofollow">RFC 2616</a> 中已經推薦了描述狀態的短語，例如"200 OK"，"<a href="/wiki/HTTP_404" title="HTTP 404">404 Not Found</a>"，但是WEB開發者仍然能夠自行決定採用何種短語，用以顯示在地化的狀態描述或者自訂訊息。
</p>
<p>在HTTP 0.9和1.0中，<a href="/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" title="傳輸控制協定">TCP連線</a>在每一次請求/回應對之後關閉。在HTTP 1.1中，引入了保持連線的機制，一個連接可以重複在多個請求/回應使用。持續連線的方式可以大大減少<a href="/wiki/%E5%BB%B6%E8%BF%9F_(%E5%B7%A5%E7%A8%8B%E5%AD%A6)" title="延遲 (工程學)">等待時間</a>，因為在發出第一個請求後，雙方不需要重新執行<a href="/wiki/%E6%8F%A1%E6%89%8B_(%E6%8A%80%E6%9C%AF)" title="交握 (技術)">TCP交握程式</a>。
</p>
<p>HTTP 1.1還改進了HTTP 1.0的頻寬。 例如，HTTP 1.1引入了<a href="/wiki/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81" title="分塊傳輸編碼">分塊傳輸編碼</a>，以允許傳遞內容可以在持續連線上被串流傳輸而不必使用到<a href="/wiki/%E7%B7%A9%E8%A1%9D%E5%99%A8" title="緩衝器">緩衝器</a>。HTTP管道允許客戶端在收到每個回應之前發送多個請求，進一步減少<a href="/wiki/%E4%BD%BF%E7%94%A8%E8%80%85%E7%B6%93%E9%A9%97" title="使用者經驗">用戶感受到的</a>滯後時間。協定的另一個補充是位元組服務，允許客戶端請求資源的某一部份，伺服器僅回應某資源的指明部分。
</p>
<p>下面是一個HTTP客戶端與伺服器之間對談的例子，執行於www.google.com，埠80
</p>
<p>發出的請求訊息（message request）包括以下幾個:
</p>
<p>請求行和標題必須以&lt;CR&gt;&lt;LF&gt;作為結尾。空行內必須只有&lt;CR&gt;&lt;LF&gt;而無其他空格。在HTTP/1.1協定中，所有的請求頭，除Host外，都是可選的。
</p>
<p>（末尾有一個空行。第一行指定方法、資源路徑、協定版本；第二行是在1.1版里必帶的一個header作用於指定主機）
</p>
<p>（緊跟著一個空行，並且由HTML格式的文字組成了Google的首頁）
</p>
<p>在HTTP1.0，單一TCP連接內僅執行一個「客戶端傳送請求—伺服器傳送應答」周期，之後釋放TCP連接。在HTTP1.1最佳化支援持續活躍連接：客戶端連續多次傳送請求、接收應答；批次多請求時，同一TCP連接在活躍（Keep-Live）間期內復用，避免重複TCP初始交握活動，減少網路負荷和回應周期。此外支援應答到達前繼續傳送請求（通常是兩個），稱為「流線化」（stream）。
</p>
<p><a href="/wiki/Gopher_(%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE)" title="Gopher (網路協定)">Gopher</a>是1990年代早期被HTTP取代的內容傳遞協定。<a href="/wiki/SPDY" title="SPDY">SPDY</a>是<a href="/wiki/Google" title="Google">Google</a>開發的HTTP的替代方案，它被新版本的HTTP協定<a href="/wiki/HTTP/2" title="HTTP/2">HTTP/2</a>所取代。
</p>
